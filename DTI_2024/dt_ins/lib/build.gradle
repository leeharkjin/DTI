/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.6.4/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:31.1-jre'
    
    
    //implementation files("lib/starter-0.6.0-SNAPSHOT.jar")
    implementation files("lib/starter-1.1.0.jar")
    
    
    implementation 'ch.qos.logback:logback-classic:1.4.1'
    implementation 'org.slf4j:slf4j-api:2.0.3'
    
    //implementation 'org.jdbi:jdbi:3.23.0'
    implementation 'org.jdbi:jdbi3-sqlobject:3.23.0'
    //implementation 'org.jdbi:jdbi3-jackson2:3.23.0'
    //implementation 'org.jdbi:jdbi3-sqlobject-guice:3.23.0'
    //implementation 'org.jdbi:jdbi3-guice:3.23.0'
    
    implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '3.0.5'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
}
task deployConfig(type: Copy) {
    from 'config'
    into 'build/libs/config'
}
jar {
    manifest { attributes 'Main-Class': 'dt_instance.dt_instance' }
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}


configurations.all {
	resolutionStrategy.eachDependency { DependencyResolveDetails details ->
		if (details.requested.module.toString() == "com.google.inject:guice") {
			details.artifactSelection{
				it.selectArtifact(DependencyArtifact.DEFAULT_TYPE, null, null)
			}
		}
	}
}
